#ifndef __H_PANEL__
#define __H_PANEL__

#include <stdint.h>
#include "rss.h"

// ↑↓:カーソル移動 ENTER:選択 ROLLUP/DOWN:ページ移動 F1:先頭行 F2:最終行 F10:終了
//#define STATUS_BAR_CHANNEL_LIST " \x81\xaa\x81\xab\x3a\x83\x4a\x81\x5b\x83\x5c\x83\x8b\x88\xda\x93\xae\x20\x45\x4e\x54\x45\x52\x3a\x91\x49\x91\xf0\x20\x52\x4f\x4c\x4c\x55\x50\x2f\x44\x4f\x57\x4e\x3a\x83\x79\x81\x5b\x83\x57\x88\xda\x93\xae\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x46\x31\x3a\x90\xe6\x93\xaa\x8d\x73\x20\x46\x32\x3a\x8d\xc5\x8f\x49\x8d\x73\x20\x46\x31\x30\x3a\x8f\x49\x97\xb9"
#define STATUS_BAR_CHANNEL_LIST  " \x81\xaa\x81\xab\x3a\x83\x4a\x81\x5b\x83\x5c\x83\x8b\x88\xda\x93\xae\x20\x20\x45\x4e\x54\x45\x52\x3a\x91\x49\x91\xf0\x20\x20\x52\x4f\x4c\x4c\x55\x50\x2f\x44\x4f\x57\x4e\x3a\x83\x79\x81\x5b\x83\x57\x88\xda\x93\xae\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x46\x31\x3a\x90\xe6\x93\xaa\x8d\x73\x20\x20\x46\x32\x3a\x8d\xc5\x8f\x49\x8d\x73\x20\x20\x46\x31\x30\x3a\x8f\x49\x97\xb9"

// ↑↓:記事移動 ←→:ﾁｬﾝﾈﾙ切替 ESC:戻る ROLLUP/DOWN:ﾍﾟｰｼﾞ F1:先頭行 F2:最終行 F5:再読込 F10:終了
#define STATUS_BAR_ITEM_LIST     " \x81\xaa\x81\xab\x3a\x8b\x4c\x8e\x96\x88\xda\x93\xae\x20\x81\xa9\x81\xa8\x3a\xc1\xac\xdd\xc8\xd9\x90\xd8\x91\xd6\x20\x45\x53\x43\x3a\x96\xdf\x82\xe9\x20\x52\x4f\x4c\x4c\x55\x50\x2f\x44\x4f\x57\x4e\x3a\xcd\xdf\xb0\xbc\xde\x20\x46\x31\x3a\x90\xe6\x93\xaa\x8d\x73\x20\x46\x32\x3a\x8d\xc5\x8f\x49\x8d\x73\x20\x46\x35\x3a\x8d\xc4\x93\xc7\x8d\x9e\x20\x46\x31\x30\x3a\x8f\x49\x97\xb9"

// >>>> 通信中               ESC:キャンセル F10:終了
#define STATUS_BAR_COMMUNICATION "\x20\x3e\x3e\x3e\x3e\x20\x92\xca\x90\x4d\x92\x86\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x45\x53\x43\x3a\x83\x4c\x83\x83\x83\x93\x83\x5a\x83\x8b\x20\x46\x31\x30\x3a\x8f\x49\x97\xb9"


typedef struct {

  RSS* rss;
  RSS_CHANNEL* channel; 

  int32_t info_bar_color;

  char* cut_file_name;
  int32_t cut_file_color;

  int16_t cursor_pos;
  int16_t cursor_ofs;

  int16_t channel_list_len;
  int16_t item_list_len;

  uint8_t clock_info[32];

  uint32_t vdisp_counter;

  int16_t communication_status;
  int16_t communication_counter;

} PANEL;

int32_t panel_open(PANEL* panel, RSS* rss, int32_t info_bar_color, char* cut_file_name, int32_t cut_file_color);
void panel_close(PANEL* panel);
void panel_clear(PANEL* panel);

void panel_set_communication_status(PANEL* panel, int16_t status);
//void panel_status_channel_list(PANEL* panel);
//void panel_status_item_list(PANEL* panel);


#define CHANNEL_SELECT_OK         (0)
#define CHANNEL_SELECT_EXIT       (1)

int32_t panel_list_channels(PANEL* panel);


#define ITEM_SELECT_OK            (0)
#define ITEM_SELECT_EXIT          (1)
#define ITEM_SELECT_RELOAD        (2)
#define ITEM_SELECT_PREV_CHANNEL  (3)
#define ITEM_SELECT_NEXT_CHANNEL  (4)

int32_t panel_list_channel_items(PANEL* panel);

#endif